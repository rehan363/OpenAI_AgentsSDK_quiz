from hello_agent import run
from agents import Agent, Runner, set_tracing_disabled, handoff, RunContextWrapper, TResponseInputItems
from pydantic import BaseModel
from typing import Literal
from dataclasses import dataclass

#creating a class for user input
class GymUser(BaseModel):
    fitness_goal: str

#creating a feedback structure for evaluator
@dataclass
class PlanFeedback:
    feedback: str
    plan: Literal["pass", "needs_improvement", "fail"]

#Agent for generating workout plans
work_out_and_diet_plan_generator = Agent(
    name="WorkoutandDietPlanGenerator",
    instructions="You are a fitness and nutrition expert. Generate a personalized workout and diet plan based on the user's fitness goal and dietary preferences.",
 )
#Agent for evaluating the plans
evaluator = Agent(
    name= "evaluator",
    instructions="""you are an evaluator. You will evaluate the workout and diet plans generated by the WorkoutandDietPlanGenerator agent and provide feedback based on the user's fitness goal""",
    output_type=PlanFeedback,
)

#defining conditions 

async def main() ->None:
    msg = input("Enter your fitness goal (e.g., weight loss, muscle gain, etc.): ")
    input_items: list[TResponseInputItems] = [{"content": msg, "role": "user"}]
    latest_plan: str | None = None

    #we will run the entire workflow in a single trace

    while True:
        workout_and_diet_plan_result = await Runner.run(
            work_out_and_diet_plan_generator,
            input=input_items,
        )